/* 
    lib name: video generator from images on window scroll,
    developed by: vishal rathour,
    version: 0.0.5
	update on :- 28-Nov-2023
*/

function videoMaker(e) {
	let t = e.live_url || "",
		a = e.desktop || {},
		n = e.mobile || {},
		r = e.containerID || "#canvasPlay",
		i = e.canvasID || "canvas",
		o = e.responsiveStart || 767,
		c = null,
		s = null,
		l = [],
		d = e.imagePreLoader || "#image_pre_loader",
		g = null,
		u = 0,
		m = 0,
		type = e.type || '.jpg',
		rootMargin = e.rootMargin || '0px',
		render = e.render || null,
		root = e.root || null,
		onType = null,
		onMethod = null,
		isDyanamicId  = e.isDyanamicId || false,
		dyanamicIDPrefic = e.dyanamicIDPrefic || undefined,
		contentData = e.contentData || [],
		contentSetHeight = e.contentSetHeight || 0,
		resizeHandler = null,
		resizeTiming = 500,
		resizeManage = {
			isMobile:false,
			isDesktop:false
		},
		f = {
			buildCanvas: function() {
				let e = document.querySelector(i);
				e && (c = e, s = e.getContext("2d"),e.style.cssText = "position: fixed;left: 0;top: 0;width: 100%;height: auto;");
			},
			createImageData: function(e, a, n, r, i) {
				l = [];
				for (let o = n; o <= r; o++) {
					let c = `${t}${e}/${a} (${o})`;
					l.push(c)
				}
			},
			getElement: function(e) {
				return document.querySelector(e)
			},
			content_based_responsive: function(current_data,is_mobile){
				let ret = false;
				let text = null;
				contentData.length > 0 &&  contentData.forEach(function(pos){
					current_data = current_data.toLowerCase(); 
					const matches = current_data.match(/\((.*?)\)/);
					if(!is_mobile){
						if(matches[1] == pos.key){
							ret = true
							text = pos.content;
						}
						else{
							ret = false
						}
					}
					else{
						if(matches[1] == pos.mobile_key){
							ret = true
							text = pos.content;
						}
						else{
							ret = false
						}
					}
					
			
				});
			   // console.log(ret,text)
				return {'ret':ret,'text':text}
			},
			text_content_slide: function(current_data){
				return new Promise((resolve)=>{
					let _ret = false;
					let _text = null;
					try{
						if(f.getWidth() <= o){
							let {ret,text} =  f.content_based_responsive(current_data,true);
							resolve(text);
						}
						else{
							 let {ret,text} = f.content_based_responsive(current_data,false);
							 resolve(text);
						}
						
					}
					catch(e){
						console.log(e)
					}
				})
				
				
			},
			createImage: function(e, t, a, index) {
				let n = document.createElement("div");
				 n.setAttribute("image_src", e); n.className = "image-get-container"; 
				isDyanamicId === true && n.setAttribute('id',dyanamicIDPrefic + (index + 1));
				
				 f.text_content_slide(e).then((result)=>{
						if(result){
							let element_data_set = "<div class='slide-text-between'>";
							element_data_set += result;
							element_data_set += "</div>";
							n.innerHTML = element_data_set;
							f.getWidth() <= o ? (n.style.height = 'auto'):(n.style.height = contentSetHeight + 'px')
							
							t.appendChild(n);
						}
						else
						{
							n.style.height = a + "px"
							t.appendChild(n);
						}

				});
				//t.appendChild(n);
			},
			loadImage: async function(e, t) {
				return new Promise((a, n) => {
					t.onload = () => {
						a(t)
					}, t.onerror = n, t.src = e
				})
			},
			createPreImage: async function() {
				u = 0, m = 0, f.removeNodes(d);
				let e = document.querySelector(d);
				l.forEach(function(t, a) {
					let n = document.createElement("img"),
						r = t + type;
					n.src = r, e.appendChild(n), u = a + 1;
					f.loadImage(r, n).then(function() {
						0 === m && (f.event('start'), onMethod && onMethod.call(this,{'status':'start','view':resizeManage.isDesktop ? 'desktopView':'mobileView'})), 
						m += 1, 
						u === m && (f.event('end') , onMethod && onMethod.call(this,{'status':'end','view':resizeManage.isDesktop ? 'desktopView':'mobileView'}))
						
					});
					
				});
			},
			settelCanvasImage: function(e) {
				let t = new Image;
				t.addEventListener("load", function() {
					s.clearRect(0, 0, t.width, t.height), 
					s.canvas.width = t.width, 
					s.canvas.height = t.height, 
					s.drawImage(t, 0, 0, t.width, t.height)
				}, !1), t.src = e;

				
			},
			removeNodes: function(e) {
				let t = document.querySelector(e);
				t && (t.innerHTML = "")
			},
			createImageElements: function(e) {
				let t = f.getElement(r);
				f.removeNodes(r), l.forEach(function(a,index) {
					f.createImage(a + type, t, e, index)
				})
			},
			observData: function() {
				let e = document.querySelectorAll(".image-get-container");
				if ("IntersectionObserver" in window) {
					var t = function(e) {
							e.forEach(function(e) {
								if (e.isIntersecting) {
									let t = e.target.getAttribute("image_src");
									f.settelCanvasImage(t)
								}
							})
						},
						a = new IntersectionObserver(t, {
							root: root,
							threshold: 0,
							rootMargin: rootMargin
						});
					e.forEach(function(e) {
						a.observe(e)
					})
				} else console.log("IntersectionObserver not support")
			},
			getWidth: function() {
				return window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth
			},
			setDataItems: async function(e, a) {
				let {
					folderName: n,
					image_Prefix: r,
					startPos: i,
					endPos: o,
					animationGap: c
				} = e, s = 0;
				s = void 0 === i ? 1 : i, void 0 != n && void 0 != r ? (f.createImageData(n, r, s, o, c), f.createImageElements(void 0 === c || 0 === c ? 60 : c), await f.createPreImage(), f.settelCanvasImage(`${t}${n}/${r} (${s})${type}`)) : console.error("please set image path and images prefix. -", a);
				f.observData();
			},
			setImageParentClass: function() {
				let e = document.querySelector(d);
				e && e.classList.add("pre-image-loader-data-mapping")
			},
			refresh: async function() {
				f.setImageParentClass();
				f.getWidth() <= o ?  ( resizeManage.isMobile === false && await f.setDataItems(n, "Mobile"),resizeManage.isMobile = true, resizeManage.isDesktop = false):( resizeManage.isDesktop == false && await f.setDataItems(a, "Desktop"),resizeManage.isDesktop = true, resizeManage.isMobile = false);
				
			},
			createEvent: async function(e) {
				g = new CustomEvent("render_video", {
					detail: {
						status: e
					},
					bubbles: !0
				}), document.dispatchEvent(g)
			},
			init: function() {
				f.buildCanvas(), f.refresh();
				let e = document.querySelector(d);
				e && (e.style.display = "none");
				window.addEventListener('resize',function(){
					this.clearTimeout(resizeHandler);
					resizeHandler = this.setTimeout(()=>{
						f.refresh();
					},(resizeTiming));
					
				});
				
			},
			event:function(_data){
				render && render.call(f,{'status':_data});
			},
			on:function(type,handler){
				onType = type;
				onMethod = handler;
			}
		};
	return f
}

module.exports = videoMaker;